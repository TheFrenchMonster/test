struct map* map = map_new(STATIC_MAP_WIDTH, STATIC_MAP_HEIGHT);

		unsigned char themap[STATIC_MAP_WIDTH * STATIC_MAP_HEIGHT] = {
		  CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY,
		  CELL_STONE, CELL_STONE, CELL_STONE, CELL_EMPTY, CELL_STONE, CELL_EMPTY, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE, CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_BOX, CELL_STONE, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_EMPTY, CELL_EMPTY,
		  CELL_BOX, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_BOX, CELL_STONE, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_BOX, CELL_STONE, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_STONE, CELL_STONE, CELL_EMPTY, CELL_EMPTY, CELL_STONE, CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY , CELL_EMPTY, CELL_EMPTY, CELL_STONE,  CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_TREE, CELL_BOX, CELL_TREE, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY,  CELL_EMPTY, CELL_STONE,  CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_TREE, CELL_TREE, CELL_TREE, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY,  CELL_STONE,  CELL_EMPTY, CELL_EMPTY,
		  CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_STONE,  CELL_EMPTY, CELL_EMPTY,
		  CELL_BOX, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE, CELL_STONE,  CELL_BOX_LIFE, CELL_EMPTY,
		  CELL_BOX,  CELL_EMPTY, CELL_DOOR, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY, CELL_EMPTY,
			};

		for (int i = 0; i < STATIC_MAP_WIDTH * STATIC_MAP_HEIGHT; i++)
			map->grid[i] = themap[i];
	return map;

struct map* map_load_map(void)
{
	unsigned char themap[200];
	int i=0;
	int k=0;
	int l=0;
	char width[5]="";
	char height[5]="";
	char *chaine[100];

		FILE* fichier =NULL;
		fichier = fopen("pg110-2017-gb-t4/sources/map/map_1","r");

		while (fgets(*chaine, strlen(*chaine), fichier) != NULL) {
			if(i==0) {
				while(*chaine[k] != 'x') {
					strcat(width,chaine[k]);
					k++;
					}
				k++;
				while(*chaine[k] != '\0') {
					strcat(height,chaine[k]);
					k++;
					}
				k=0;
				i++;
				}
			else {
				while(*chaine[k] != '\0') {
					char cell[3];
					while(*chaine[k] != ' ') {
						strcat(cell,chaine[k]);
						k++;
					}

					switch(atoi(cell)) {
						case 0:
							themap[l]=CELL_EMPTY;
							l++;
							break;
						case 16:
							themap[l]=CELL_STONE;
							l++;
							break;
						case 17:
							themap[l]=CELL_TREE;
							l++;
							break;
						case 18:
							themap[l]=CELL_PRINCESS;
							l++;
							break;
						case 32:
							themap[l]=CELL_BOX;
							l++;
							break;
						case 33:
							themap[l]=CELL_BOX_RANGEINC;
							l++;
							break;
						case 34:
							themap[l]=CELL_BOX_RANGEDEC;
							l++;
							break;
						case 35:
							themap[l]=CELL_BOX_BOMBINC;
							l++;
							break;
						case 36:
							themap[l]=CELL_BOX_BOMBDEC;
							l++;
							break;
						case 37:
							themap[l]=CELL_BOX_LIFE;
							l++;
							break;
						case 38:
							themap[l]=CELL_BOX_MONSTER;
							l++;
							break;
						case 48:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 49:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 50:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 51:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 52:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 53:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 54:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 55:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 56:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 57:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 58:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 59:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 60:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 61:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 62:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 63:
							themap[l]=CELL_DOOR;
							l++;
							break;
						case 64:
							themap[l]=CELL_KEY;
							l++;
							break;

						case 80:
							themap[l]=CELL_BONUS;
							l++;
							break;
						case 81:
							themap[l]=CELL_BONUS;
							l++;
							break;
						case 82:
							themap[l]=CELL_BONUS;
							l++;
							break;
						case 83:
							themap[l]=CELL_BONUS;
							l++;
							break;
						case 84:
							themap[l]=CELL_BONUS;
							l++;
							break;
						case 85:
							themap[l]=CELL_BONUS;
							l++;
							break;
						case 96:
							themap[l]=CELL_MONSTER;
							l++;
							break;
						case 112:
							themap[l]=CELL_BOMB;
							l++;
							break;
						default:
							l++;
							break;
					}

				}
			}

	}
		struct map* map = map_new(atoi(width), atoi(height));
		for (int j = 0; j < atoi(width)*atoi(height); j++){
				map->grid[j] = themap[j];
		}
			return map;

}
	
